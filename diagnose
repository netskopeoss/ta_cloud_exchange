#!/bin/bash

SUBJECT=some-unique-id

# --- Locks -------------------------------------------------------
LOCK_FILE=/tmp/$SUBJECT.lock
if [ -f "$LOCK_FILE" ]; then
   echo "Script is already running"
   exit
fi

trap "rm -f $LOCK_FILE" EXIT
touch $LOCK_FILE

# --- Output functions --------------------------------------------

RHEL=$(rpm --query redhat-release)
MAINTENANCE_PASSWORD=$(cat .env | grep MAINTENANCE_PASSWORD=)
MAINTENANCE_PASSWORD=${MAINTENANCE_PASSWORD#*=}
MAINTENANCE_PASSWORD=`echo $MAINTENANCE_PASSWORD | tr -d "'"`
core_check=false
ui_check=false
mongo_check=false
rabbitmq_check=false
mongo_running=false
rabbitmq_running=false

out_docker_core_logs() { 
  OUT="core.log"
  echo "----- Collecting Core Logs -----" > /dev/tty
  if [ $core_check == "false" ]; then
    echo "Core container is not up. Thus, not able to collect core logs." > /dev/tty
    return 1
  fi
  if [[ $RHEL: == *"redhat-release-"* ]]; then
    podman-compose -f podman-compose.yml logs core >& $OUT
  else  
    docker-compose logs --no-color core >& $OUT
  fi
  echo $OUT
}

out_docker_ui_logs() {
  echo "----- Collecting UI Logs -----" > /dev/tty
  OUT="ui.log"
  if [ $ui_check == "false" ]; then
    echo "UI container is not up. Thus, not able to collect UI logs." > /dev/tty
    return 1
  fi
  if [[ $RHEL: == *"redhat-release-"* ]]; then
    podman-compose -f podman-compose.yml logs ui >& $OUT
  else  
    docker-compose logs --no-color ui >& $OUT
  fi
  echo $OUT
}

out_docker_mongo_logs() {
  echo "----- Collecting Mongo Logs -----" > /dev/tty
  OUT="mongo.log"
  if [ $mongo_check == "false" ]; then
    echo "MongoDB container is not up. Thus, not able to collect MongoDB logs." > /dev/tty
    return 1
  fi
  if [[ $RHEL: == *"redhat-release-"* ]]; then
    podman-compose -f podman-compose.yml logs mongodb-primary >& $OUT
  else  
    docker-compose logs --no-color mongodb-primary >& $OUT
  fi
  echo $OUT
}

out_docker_rabbitmq_logs() {
  echo "----- Collecting Rabbitmq Logs -----" > /dev/tty
  OUT="rabbitmq.log"
  if [ $rabbitmq_check == "false" ]; then
    echo "Rabbitmq container is not up. Thus, not able to collect rabbitmq logs." > /dev/tty
    return 1
  fi
  if [[ $RHEL: == *"redhat-release-"* ]]; then
    podman-compose -f podman-compose.yml logs rabbitmq-stats >& $OUT
  else  
    docker-compose logs --no-color rabbitmq-stats >& $OUT
  fi
  echo $OUT
}

out_stats() {
  echo "----- Collecting Machine Stats -----" > /dev/tty
  OUT="system_stats.txt"
  echo "> lscpu" >& $OUT
  lscpu >> $OUT
  echo "----------------------------------------------------------------------------------" >> $OUT
  echo "> free -h" >> $OUT
  free -h >> $OUT
  echo "----------------------------------------------------------------------------------" >> $OUT
  echo "> df -h" >> $OUT
  df -h >> $OUT
  echo $OUT
}

out_docker_stats() {
  if [[ $RHEL: == *"redhat-release-"* ]]; then
    echo "----- Collecting Podman Stats -----" > /dev/tty
    OUT="podman_stats.txt"   
    echo "> podman-compose version" >& $OUT
    podman-compose version &>> $OUT
    echo "---------------------------------------------------------------------------------" >> $OUT
    echo "> podman ps --all" >> $OUT
    podman ps --all >> $OUT
    echo "---------------------------------------------------------------------------------" >> $OUT
    echo "> podman system info" >> $OUT
    podman system info >> $OUT
    echo "---------------------------------------------------------------------------------" >> $OUT
    echo "> podman system df" >> $OUT
    podman system df >> $OUT
    echo $OUT
  else
    echo "----- Collecting Docker Stats -----" > /dev/tty
    OUT="docker_stats.txt"
    echo "> docker ps --all" >& $OUT
    docker ps --all >> $OUT
    echo "---------------------------------------------------------------------------------" >> $OUT
    echo "> docker system info" >> $OUT
    docker system info >> $OUT
    echo "---------------------------------------------------------------------------------" >> $OUT
    echo "> docker-compose version" >> $OUT
    docker-compose version >> $OUT
    echo "---------------------------------------------------------------------------------" >> $OUT
    echo "> docker system df" >> $OUT
    docker system df >> $OUT
    echo $OUT
  fi
}

out_versions() {
  echo "----- Collecting CE Version -----" > /dev/tty
  OUT="ce_platform_versions.txt"
  if [ $mongo_running == "false" ]; then
    echo "MongoDB container is not running. Thus, not able to collect CE version." > /dev/tty
    return 1
  fi
  if [[ $RHEL: == *"redhat-release-"* ]]; then
    CE_VERSION=`podman-compose exec mongodb-primary mongo --username cteadmin --password $MAINTENANCE_PASSWORD cte --eval "db.settings.find()" | grep -Po '(?<="databaseVersion" : ")[^"]*'`
    echo "> CE-Version: $CE_VERSION" >& $OUT
    CE_UID=`podman-compose exec mongodb-primary mongo --username cteadmin --password $MAINTENANCE_PASSWORD cte --eval "db.settings.find()" | grep -Po '(?<="uid" : ")[^"]*'`
    echo "> CE-INSTALLATION ID: $CE_UID" >> $OUT
  else
    CE_VERSION=`docker-compose exec -ti mongodb-primary mongo --username cteadmin --password $MAINTENANCE_PASSWORD cte --eval "db.settings.find()" | grep -Po '(?<="databaseVersion" : ")[^"]*'`
    echo "> CE-Version: $CE_VERSION" >& $OUT
    CE_UID=`docker-compose exec -ti mongodb-primary mongo --username cteadmin --password $MAINTENANCE_PASSWORD cte --eval "db.settings.find()" | grep -Po '(?<="uid" : ")[^"]*'`
    echo "> CE-INSTALLATION ID: $CE_UID" >> $OUT
  fi
  echo $OUT
}

out_ce_logs() {
  echo "----- Collecting CE Logs -----" > /dev/tty
  OUT="ce_platform_logs.log"
  if [ $mongo_running == "false" ]; then
    echo "MongoDB container is not running. Thus, not able to collect CE logs." > /dev/tty
    return 1
  fi
  if [[ $RHEL: == *"redhat-release-"* ]]; then
    podman-compose exec mongodb-primary mongo --username cteadmin --password $MAINTENANCE_PASSWORD cte --eval "db.logs.find({}, {createdAt:1,type:1,message:1,errorCode:1,details:1,_id:0}).toArray()" | grep -e  "message" -e "type" -e "createdAt" -e "errorCode" -e "details" | sed -n 'h;n;p;n;G;p;n;p;n;p' | sed -n 'h;n;G;p;n;p;n;p;n;p' | sed -e 's/[ \t]*//' | sed 'N;N;N;N;s/\n/ /g' | sed -e "s/\r//g" >& $OUT

  else
    docker-compose exec mongodb-primary mongo --username cteadmin --password $MAINTENANCE_PASSWORD cte --eval "db.logs.find({}, {createdAt:1,type:1,message:1,errorCode:1,details:1,_id:0}).toArray()" | grep -e  "message" -e "type" -e "createdAt" -e "errorCode" -e "details" | sed -n 'h;n;p;n;G;p;n;p;n;p' | sed -n 'h;n;G;p;n;p;n;p;n;p' | sed -e 's/[ \t]*//' | sed 'N;N;N;N;s/\n/ /g' | sed -e "s/\r//g" >& $OUT
  fi
  echo $OUT
}

out_docker_images(){
  if [[ $RHEL: == *"redhat-release-"* ]]; then
    echo "----- Collecting Podman Images -----" > /dev/tty
    OUT="podman_images.txt"
    podman inspect --format='{{.Id}} {{.Name}} {{.Image}}' $(podman ps -aq) >& "$OUT"
    echo $OUT
  else 
    echo "----- Collecting Docker Images -----" > /dev/tty
    OUT="docker_images.txt"
    docker inspect --format='{{.Id}} {{.Name}} {{.Image}}' $(docker ps -aq) >& "$OUT"
    echo $OUT
  fi
}

out_kernel_logs(){
  echo "----- Collecting Kernel Logs -----" > /dev/tty
  OUT="kernel.log"
  dmesg -k -T>& "$OUT"
  echo $OUT
}

out_tenant_names(){
  OUT="tenant_names.txt"
  echo "----- Collecting Tenant Names -----" > /dev/tty
  if [ $mongo_running == "false" ]; then
    echo "MongoDB container is not running. Thus, not able to collect tenant names." > /dev/tty
    return 1
  fi
  if [[ $RHEL: == *"redhat-release-"* ]]; then
    echo "Name:" >& $OUT
    podman-compose exec mongodb-primary mongo --username cteadmin --password $MAINTENANCE_PASSWORD cte --eval "db.tenants.find()" | grep -Po '(?<="name" : ")[^"]*' >> $OUT
    echo "" >> $OUT
    echo "Tenant's Name:" >> $OUT
    podman-compose exec mongodb-primary mongo --username cteadmin --password $MAINTENANCE_PASSWORD cte --eval "db.tenants.find()" | grep -Po '(?<="tenantName" : ")[^"]*' >> $OUT
  else
    echo "Name:" >& $OUT
    docker-compose exec -ti mongodb-primary mongo --username cteadmin --password $MAINTENANCE_PASSWORD cte --eval "db.tenants.find()" | grep -Po '(?<="name" : ")[^"]*' >> $OUT
    echo "" >> $OUT
    echo "Tenant's Name:" >> $OUT
    docker-compose exec -ti mongodb-primary mongo --username cteadmin --password $MAINTENANCE_PASSWORD cte --eval "db.tenants.find()" | grep -Po '(?<="tenantName" : ")[^"]*' >> $OUT
  fi
  echo $OUT
}

out_rabbitmq_stats(){
  OUT="rabbitmq_stats.txt"
  echo "----- Collecting Rabbitmq Stats -----" > /dev/tty
  if [ $rabbitmq_running == "false" ]; then
    echo "Rabbitmq container is not running. Thus, not able to collect rabbitmq logs." > /dev/tty
    return 1
  fi
  curl -s -u user:$MAINTENANCE_PASSWORD "http://localhost:15672/api/queues/%2f/" &> $OUT
  echo $OUT
}

# --- Body --------------------------------------------------------
#  SCRIPT LOGIC GOES HERE
output_generators=(
    out_versions
    out_stats
    out_docker_stats
    out_docker_images
    out_docker_core_logs
    out_docker_ui_logs
    out_docker_mongo_logs
    out_docker_rabbitmq_logs
    out_ce_logs
    out_kernel_logs
    out_tenant_names
    out_rabbitmq_stats
)

outputs=()

# check whether containers are up or not

if [[ $RHEL: == *"redhat-release-"* ]]; then
  if [ $(podman ps -q -a -f name="core") ]; then
    core_check=true
  fi
  if [ $(podman ps -q -a -f name="ui") ]; then
    ui_check=true
  fi
  if [ $(podman ps -q -a -f name="mongodb") ]; then
    mongo_check=true
    if [ $(podman ps -q -f status=running -f name="mongodb") ]; then
      mongo_running=true
    fi
  fi
  if [ $(podman ps -q -a -f name="rabbitmq") ]; then
    rabbitmq_check=true
    if [ $(podman ps -q -f status=running -f name="rabbitmq") ]; then
      rabbitmq_running=true
    fi
  fi
else
  if [ $(docker ps -q -a -f name="core") ]; then
    core_check=true
  fi
  if [ $(docker ps -q -a -f name="ui") ]; then
    ui_check=true
  fi
  if [ $(docker ps -q -a -f name="mongodb") ]; then
    mongo_check=true
    if [ $(docker ps -q -f status=running -f name="mongodb") ]; then
      mongo_running=true
    fi
  fi
  if [ $(docker ps -q -a -f name="rabbitmq") ]; then
    rabbitmq_check=true
    if [ $(docker ps -q -f status=running -f name="rabbitmq") ]; then
      rabbitmq_running=true
    fi
  fi
fi


# check whether zip is installed or not
zip -v 1> /dev/null
if [ $? -eq 127 ]; then
  echo "Zip is not installed"
  exit 1;
fi

# check whether curl is installed or not
curl --version 1> /dev/null
if [ $? -eq 127 ]; then
  echo "curl is not installed"
  exit 1;
fi

for i in ${output_generators[@]}; do
  output=`$i`
  outputs+="${output} "
done

# create zip file
echo "----- Creating zip file -----"
OUT="`date | tr " " "_"`.zip"

zip -r "$OUT" ${outputs[@]}
echo $OUT

# remove individual files
rm -rf ${outputs[@]}

# -----------------------------------------------------------------
